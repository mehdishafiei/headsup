head(d)
source('C:/HH_competition/data_generation.R')
head(d)
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
table(d$is_sepsis)
head(d)
d
table(d$is_sepsis)
d [d$is_sepsis>2,]
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
d [d$is_sepsis>2,]
source('C:/HH_competition/data_generation.R')
d [d$is_sepsis>2,]
source('C:/HH_competition/data_generation.R')
d [d$is_sepsis>2,]
source('C:/HH_competition/data_generation.R')
d [d$is_sepsis>2,]
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
head(d)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
clean
clean()
rm(list = ls())
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
table(d$is_sepsis)
source('C:/HH_competition/data_generation.R')
plot(d_non$)
source('C:/HH_competition/data_generation.R')
head(d_non)
head(d_sepsis)
plot(d_non)
plot(d_non$`2`)
plot(d_non$`3`)
plot(d_non$`4`)
plot(d_non$`5`)
source('C:/HH_competition/data_generation.R')
plot(d_non$`5`)
y[1] <- d_non[,2]
d_non[,2]
y[1] <- d_non[,2]
y <- matrix(ncol = 5)
y[1] <- d_non[,2]
lenghth(d_non[,2])
len(d_non[,2])
length(d_non$`2`)
length(d_non[,2])
y <- matrix(ncol = 5, nrow =  length(d_non[,2]) )
y[1] <- d_non[,2]
size(d_non[,2])
plot(d$`2`)
plot(d$`2`, 1)
x <- 1
plot(x, d$`2`)
length(d_non$`2`)
matrix(933,2)
matrix(dimnames = c(2,5,length(d_non$`2`)))
matrix(dim = c(2,5,length(d_non$`2`)))
c(2, 5, length(d_non$`2`))
list(c(2, 5, length(d_non$`2`)))
matrix(dim = list(c(2,5,length(d_non$`2`)))  )
matrix(dim = c(2,3,4) )
array(rep(1, 365*5*4), dim=c(365, 5, 4))
array(rep(1, 365*5*4), dim=c(365, 5, 4))
array(rep(1, 365*5*4), dim=c(2, 5, 4))
array( dim=c(2, 5, 4))
array( dim=c(2, 5, length(d[,2])))
mtx <- array( dim=c(2, 5, length(d[,2])))
dim(mtx)
mtx[1,1] <- d_non[,2]
mtx[1,1,3] <- d_non[,2]
length(mtx[1,1,3])
length(mtx[1,1])
d2 <- melt(d)
library(reshape2)
d2 <- melt(d)
head(y)
melt(d, id="id")
source('C:/HH_competition/data_generation.R')
melted <- melt(d, id="id")
tail(melted)
head(d)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
head(d_non)
head(d_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
head(d_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
nrow(d_sepsis)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
head(melted_non)
tail(melted_non)
plot(melted_non$variable, melted_non$value)
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
plot(melted_non$variable, melted_non$value)
plot(melted_sepsis$variable, melted_sepsis$value)
plot(melted_non$variable, melted_non$value)
plot(melted_sepsis$variable, melted_sepsis$value)
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
plot(melted_non$variable, melted_non$value)
source('C:/HH_competition/data_generation.R')
plot(melted_non$variable, melted_non$value)
plot(melted_sepsis$variable, melted_sepsis$value)
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
plot(melted_non$variable, melted_non$value)
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
plot(melted_sepsis$variable, melted_sepsis$value)
library(rtruncnorm)
library(truncnorm)
plot(melted_sepsis$variable, melted_sepsis$value, xabel="Intervals")
plot(melted_sepsis$variable, melted_sepsis$value, xabel="Intervals")
plot(melted_sepsis$variable, melted_sepsis$value, main="title", sub="subtitle",
xlab="X-axis label", ylab="y-axix label",
xlim=c(xmin, xmax), ylim=c(ymin, ymax))
plot(melted_sepsis$variable, melted_sepsis$value, xabel="Intervals" )
plot(melted_non$variable, melted_non$value)
plot(melted_non$variable, melted_non$value, xlab="X-axis label")
plot(melted_non$variable, melted_non$value, xlab="intervals")
plot(melted_non$variable, melted_non$value, xlab="intervals", ylab="Heart Rate")
plot(melted_non$variable, melted_non$value, xlab="intervals", ylab="Heart Rate", xlim(110, 165))
source('C:/HH_competition/data_generation.R')
library(melt)
library(reshape2)
source('C:/HH_competition/data_generation.R')
plot(melted_non$variable, melted_non$value, xlab="intervals", ylab="Heart Rate", xlim(110, 165))
source('C:/HH_competition/data_generation.R')
plot(melted_non$variable, melted_non$value, xlab="intervals", ylab="Heart Rate", xlim(110, 165))
plot(melted_non$variable, melted_non$value, xlab="intervals", ylab="Heart Rate", xlim(110, 165))
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
source('C:/HH_competition/data_generation.R')
library("swirl")
install_from_swirl("Statistical Inference")
swirl()
33/36
swirl()
0.91
33/36
decl
deck
52
4/52
0.0769
info()
0
12/52
2/51
0.8*1.6/2
0.64
mypdf()
?myodf
mypdf(1.6)
mypdf
integrate(mypdf, 0, 1.6)
sqrt(2)
99.7*0.001
0.997*0.001
(1-0.985)*(1-0.997)
(1-0.985)*(1-0.997)
(1-0.985)*(1-0.001)
(99.7*0.001)/(99.7*0.001+(1-0.985)*(1-0.001))
(.997*.001)/(.997*.001 + .015*.999)
21/6
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5 *(
| E(X_hi)+E(X_lo) )
.5 *( E(X_hi)+E(X_lo) )
.5 *( edh+edl)
integrate(myfi)
integrate(myfunc,  0 , 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
?rand
?quinf
?qunif
qunif(0.75)
swirl()
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr*PDF())
ex2_fair <- sum(dice_sqr)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair-3.5*3.5
sum(dice_high*dice_fair - edh)
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(n)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(n))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * 0.8^3 * (1-0.8)^(2)
choose(5,x)*(.8)^x*(.2)^(5-x)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(2,5,prob = 0.8, tail=FALSE)
pbinom(2,5,prob = 0.8, lower,tail=FALSE)
pbinom(2,5,prob = 0.8, lower.tail=FALSE)
qnorm(0.1)
0
qnorm(97.5, mean = 3,sd=2)
qnorm(0.975, mean = 3,sd=2)
qnorm(3+2)
1.96*2 + 3
pnorm(1200, mean = 1020, sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(0.75, mean = 1020 sd=50, lower_tail=TRUE)
qnorm(0.75, mean=120, sd=50, lower.tail = TRUE)
qnorm(.75,mean=1020,sd=50)
0.53
0.53
ppois(3, lambda = 2.5*4, lower.tail = FALSE, log.p = FALSE)
ppois(3, lambda = 2.5*4)
pbinom()
pbinom()2
pbinom(2)
x=2
pbinom(5,1000,.01)
ppois(5, 1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(0.95)
m=0
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf
x$conf.int
m=2
binom.test(60,100)$conf.int
mywald(0.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1, 1)*qnorm(0.975)*sqrt()
f=0
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
pnorm(70, mean = 80, sd=10)
qnorm(0.95, mean = 1100, sd=75)
qnorm(0.95, mean = 1100, sd=sqrt(75/100))
qnorm(0.95, mean = 1100, sd=86)
qnorm(0.95, mean = 1100, sd=0.86)
choose(2,5)
choose(n=5, k=2)
choose(n=5, k=4)
choose(n=5, k=1)
choose(n=5, k=1)*(1/2^4)
choose(n=5, k=1)*(1/2^4)+ 1/(2^5)
?pnorm
?punif
ppois(10/15)
ppois(10, lambda = 5)
ppois(10, lambda = 15)
choose(n=5, k=4)*(1/2^4)+ 1/(2^5)
ppois(10,15)
ppois(16,15)
I am a computational chemist. We develop a verity of useful computational and statistical methods for analyzing complicated systems. However, I am interested in transforming from a  scientific statistical researcher  to a data scientist and software developer. I am taking online certified courses, but still, I need a professional environment to develop my skills and share my knowledge. I consider myself as a problem solver, and I believe that by critical and innovative thinking, there is no limitation for advancement.
hist(runif(1000))
hist(runif(10000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
n=40
lambda=0.2
rexp
rexp(n,lambda)
simulation <- data.frame(ncol=3)
mean(rexp(n,lambda))
prdcd_sample <- mean(rexp(n,lambda))
prdcd_sample
prdcd_sample <- rexp(n,lambda)
prdcd_sample
sd(prdcd_sample)
?sd
simulation <- data.frame(ncol=3)
names(simulation) <- c("sample id", "mean", "standard deviation")
names(simulation)
simulation <- data.frame(ncol=3, nrow=1000)
simulation
simulation <- data.frame()
simulation
names(simulation) <- c("sample id", "mean", "standard deviation")
sim <- data.frame()
sim
rbind(sim, c("hi", "bye"))
rbind(sim, c("hi", "bye", "else"))
sim
rbind(c("hi", "bye", "else"),sim)
sim
sim = data.frame(id = numeric(0), jobs = numeric(0))
sim
sim = data.frame(id = numeric(0), mean = numeric(0), sd=numeric(0))
sim
simulation <- data.frame(id = numeric(0), mean = numeric(0), sd=numeric(0))
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
dat <- rbind(i, mean_sample, sd_sample, )
}
n_of_sim=1000
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
dat <- rbind(i, mean_sample, sd_sample, )
}
simulation <- data.frame(id = numeric(0), mean = numeric(0), sd=numeric(0))
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
dat <- rbind( c(i, mean_sample, sd_sample), simulation)
}
simulation
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
simulation <- rbind( c(i, mean_sample, sd_sample), simulation)
}
simulation
simulation <- data.frame(mean = numeric(0), sd=numeric(0))
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
simulation <- rbind( c(mean_sample, sd_sample), simulation)
}
simulate()
simulattion
simulation
summary(simulation)
tail(simulation)
names(simulation)
head(simulation)
names(simulation) <- c( "mean", "standard deviation")
head(simulation)
View(simulation)
View(simulation)
rm(simulation)
simulation <- data.frame(mean = numeric(0), sd=numeric(0))
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
simulation <- rbind( c(mean_sample, sd_sample), simulation)
}
head(simulation)
nrow(simulation)
simulation <- data.frame(mean = numeric(0), sd=numeric(0))
names(simulation) <- c("a", "b")
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
simulation <- rbind( c(mean_sample, sd_sample), simulation)
}
head(simulation)
names(simulation)
names(simulation) <- c("hi", "by")
names(simulation)
simulation <- data.frame(mean = numeric(0), sd=numeric(0))
names(simulation) <- c("a", "b")
for (i in 1:n_of_sim){
prpduced_sample <- rexp(n,lambda)
mean_sample=mean(prpduced_sample)
sd_sample=sd(prpduced_sample)
simulation <- rbind( c(mean_sample, sd_sample), simulation)
}
names(simulation) <- c("hi", "by")
names(simulation)
hist(simulation)
head(simulation)
hist(simulation)
hist(simulation$hi)
hist(simulation$hi, breaks = 40)
hist(simulation$hi, breaks = 100)
hist(simulation$hi, breaks = 40)
hist(simulation$hi, breaks = 40, prob=TRUE)
hist(simulation$hi, breaks = 40)
library(ggplot2)
chol <- read.table(url("http://assets.datacamp.com/blog_assets/chol.txt"), header = TRUE)
qplot(chol$AGE, geom="histogram")
(1:n_of_sim)
library(datasets)
data(ToothGrowth)
ToothGrowth[ToothGrowth$dose==0.5]
ToothGrowth[ToothGrowth$dose==0.5,]
dose_.5 <- ToothGrowth[ToothGrowth$dose==0.5,]
dose_2 <- ToothGrowth[ToothGrowth$dose==2,]
dose_sub <- ToothGrowth[ToothGrowth$dose %in% c(0.5,2),]
t.test(len~dose, paired=F, var.equal=T,dose_sub)
cd /user
ls
list
q()
shiny::runApp('C:/headsup/headsup')
runApp('C:/headsup/headsup')
runApp('C:/headsup/headsup')
getwd()
setwd("C:/headsup/headsup/")
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
shinyApp(ui, server)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
source('C:/headsup/headsup/test_ui_server.R')
runApp('test_ui_server.R')
runApp()
runApp()
runApp('test_ui_server.R')
runApp()
runApp('full_app.R')
runApp('test_ui_server.R')
runApp()
runApp('test_ui_server.R')
runApp()
runApp()
